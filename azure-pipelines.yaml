trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: AWSVariables  # Reference the variable group

stages:
- stage: Terraform
  displayName: 'Terraform'
  jobs:
  - job: BuildAndPush    
    displayName: 'Build and Push Docker Image to AWS ECR'
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'
        addToPath: true

    - script: |
        pip install awscli
      displayName: 'Install AWS CLI'

    - task: AmazonWebServices.aws-vsts-tools.AWSCLI.AWSCLI@1
      displayName: 'AWS CLI: '
      inputs:
        awsCredentials: AWSServiceConnection2
        regionName: 'ap-south-1'
        awsCommand: 'aws ecr'
        awsSubCommand: 'get-login-password'
        awsArguments: ' --region $regionName | docker login --username AWS --password-stdin $(ecrRepository).dkr.ecr.$awsRegion.amazonaws.com'
        failOnStandardError: false


    # - script: |
    #     aws ecr get-login-password --region $(awsRegion) | docker login --username AWS --password-stdin $(awsAccountId).dkr.ecr.$(awsRegion).amazonaws.com
    #   displayName: 'Login to AWS ECR'

    - script: |
        cd app
        docker build -t $(imageName) -f $(dockerFilePath) .
      displayName: 'Build Docker Image'

    - script: |
        docker tag $(imageName):latest $(awsAccountId).dkr.ecr.$(awsRegion).amazonaws.com/$(ecrRepository):latest
      displayName: 'Tag Docker Image'

    - script: |
        docker push $(awsAccountId).dkr.ecr.$(awsRegion).amazonaws.com/$(ecrRepository):latest
      displayName: 'Push Docker Image to AWS ECR'


  - job: TerraformPlan
    dependsOn: BuildAndPush
    displayName: 'Run Terraform'
    steps:
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@1
      displayName: 'Install Terraform 1.8.5'
      inputs:
        terraformVersion: 1.8.5
    
    - script: |
        terraform --version
      displayName: 'Check Terraform version'


    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV4@4
      displayName: 'Terraform : aws init'
      inputs:
        provider: aws
        backendServiceAWS: AWSServiceConnection
        backendAWSBucketName: 'sahasra-terraform-state'
        backendAWSKey: terraform.tfstate
        workingDirectory: terraform

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV4@4
      displayName: 'Terraform : plan'
      inputs:
        provider: aws
        command: plan
        environmentServiceNameAWS: AWSServiceConnection
        workingDirectory: terraform


  - job: ManualApproval
    dependsOn: TerraformPlan
    displayName: 'Approval Job'
    
    pool: server
    steps:
    - task: manualvalidation@0
      inputs:
        # notifyUsers: 'user@example.com'
        instructions: 'Please review the Terraform plan and approve to proceed with apply.'
        onTimeout: 'reject'
        timeout: '1d'


  - job: TerraformApply
    displayName: 'Run Terraform'
    dependsOn: ManualApproval
    steps:
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@1
      displayName: 'Install Terraform 1.8.5'
      inputs:
        terraformVersion: 1.8.5
    
    - script: |
        terraform --version
      displayName: 'Check Terraform version'


    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV4@4
      displayName: 'Terraform : aws init'
      inputs:
        provider: aws
        backendServiceAWS: AWSServiceConnection
        backendAWSBucketName: 'sahasra-terraform-state'
        backendAWSKey: terraform.tfstate
        workingDirectory: terraform

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV4@4
      displayName: 'Terraform : apply'
      inputs:
        provider: aws
        command: apply
        environmentServiceNameAWS: AWSServiceConnection
        workingDirectory: terraform
