trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

# variables:
#   - group: AWSVariables  # Reference the variable group

stages:
- stage: Terraform
  displayName: 'Terraform'
  jobs:
  - job: BuildAndPush    
    displayName: 'Build and Push Docker Image to AWS ECR'
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'
        addToPath: true

    - script: |
        pip install awscli
      displayName: 'Install AWS CLI'

    # Cache Docker layers
    - task: Cache@2
      inputs:
        key: 'docker | "$(Build.SourcesDirectory)/app/Dockerfile" | $(Build.SourceVersion)'
        restoreKeys: |
          docker | "$(Build.SourcesDirectory)/app/Dockerfile"
        path: /tmp/.docker-cache

    - script: |
        docker build --cache-from=type=local,src=/tmp/.docker-cache --tag whiteboard:latest $(System.DefaultWorkingDirectory)/app
        docker save whiteboard:latest | gzip > /tmp/.docker-cache/whiteboard_latest.tar.gz
      displayName: 'Build Docker Image with Cache'
      
    - task: DockerInstaller@0
      displayName: 'Install Docker 17.09.0-ce'

    - task: Docker@2
      inputs:        
        command: 'build'
        Dockerfile: '**/Dockerfile' 
        buildContext: $(System.DefaultWorkingDirectory)/app
        repository: whiteboard
        tags: latest

    - task: AmazonWebServices.aws-vsts-tools.ECRPushImage.ECRPushImage@1
      displayName: 'Push Image: '
      inputs:
        awsCredentials: AWSServiceConnection2
        regionName: 'ap-south-1'
        sourceImageName: whiteboard
        repositoryName: whiteboard

  - job: ManualApprovalDeploy
    dependsOn: BuildAndPush
    displayName: 'Approval Job to continue with deployment'    
    pool: server
    steps:
    - task: manualvalidation@0
      inputs:
        # notifyUsers: 'user@example.com'
        instructions: 'Please approve to continue with Deployment...'
        onTimeout: 'reject'
        timeout: '1d'


  - job: TerraformPlan
    dependsOn: ManualApprovalDeploy
    displayName: 'Run Terraform'
    steps:
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@1
      displayName: 'Install Terraform 1.8.5'
      inputs:
        terraformVersion: 1.8.5
    
    - script: |
        terraform --version
      displayName: 'Check Terraform version'


    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV4@4
      displayName: 'Terraform: init'
      inputs:
        provider: aws
        backendServiceAWS: AWSServiceConnection
        backendAWSBucketName: 'sahasra-terraform-state'
        backendAWSKey: terraform.tfstate
        workingDirectory: terraform

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV4@4
      displayName: 'Terraform: plan'
      inputs:
        provider: aws
        command: plan
        environmentServiceNameAWS: AWSServiceConnection
        workingDirectory: terraform


  - job: ManualApprovalTerraform
    dependsOn: TerraformPlan
    displayName: 'Approval Job to proceed with terraform apply'    
    pool: server
    steps:
    - task: manualvalidation@0
      inputs:
        # notifyUsers: 'user@example.com'
        instructions: 'Please review the Terraform plan and approve to proceed with apply.'
        onTimeout: 'reject'
        timeout: '1d'


  - job: TerraformApply
    displayName: 'Run Terraform'
    dependsOn: ManualApprovalTerraform
    steps:
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@1
      displayName: 'Install Terraform 1.8.5'
      inputs:
        terraformVersion: 1.8.5
    
    - script: |
        terraform --version
      displayName: 'Check Terraform version'


    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV4@4
      displayName: 'Terraform: init'
      inputs:
        provider: aws
        backendServiceAWS: AWSServiceConnection
        backendAWSBucketName: 'sahasra-terraform-state'
        backendAWSKey: terraform.tfstate
        workingDirectory: terraform

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV4@4
      displayName: 'Terraform: apply'
      inputs:
        provider: aws
        command: apply
        environmentServiceNameAWS: AWSServiceConnection
        workingDirectory: terraform
